# Custom bashrc that will not be touched by system
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

### Generalized ###
    ## Variables ##
        # Terminal prompt. (IE: [foo@bar ~] )
        PS1='\[\033[01;31m\][\u@\h \W]\[\033[00m\]\$ '
        PS2='> '

        # Helps with duplicated commands when "up-arrowing"
        HISTCONTROL=ignoreboth

        # Vi mode in bash
        #set -o vi

        # Tab Completion 
        bind "TAB:menu-complete"
        bind "set show-all-if-ambiguous on"
        bind "set menu-complete-display-prefix on"

    ## Aliases ##
        # NOTE: Mac OS X has its own version for ls (licensing), which is BSD and not the same
        if [[ "$OSTYPE" == "linux-gnu" ]]; then
            alias ls='ls --color=auto' 
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            alias ls='ls -G'
            alias findf='find . -name ' 
        fi

### Dependant ###
    ## Sources ##
        # Source Current Flavor's bashrc ($FLAVOR set in /etc/environment as "FLAVOR=foo")
        # Flavors defined in $HOME/.config/flavors (also see https://github.com/scagle/dotfiles)
        if [[ ! -z "${FLAVOR}" && -d "${HOME}/.config" && -d "${HOME}/.config/flavors" ]]; then
            export FLAVOR_DIR="${HOME}/.config/flavors/${FLAVOR}/"
            source "${HOME}/.config/flavors/${FLAVOR}/${FLAVOR}.bashrc"
        fi;
    
        # Start git auto complete script if it exists
        if [[ -d ~/Scripts && -f ~/Scripts/git_completion ]]; then 
            source ~/Scripts/git_completion
        fi;

    ## Variables ##
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # Use GNU style tools (without g-prefix) before using Mac OS X BSD ones
            PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
        fi;

        # Add my personal user scripts to path
        [[ -d ~/Scripts/ ]] && PATH=$PATH:~/Scripts/

        # Ripgrep
        [[ -x /bin/rg || -x /usr/local/bin/rg ]] && export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

        # Neovim compatibility (see $HOME/.vim/vimrc/mappings.vim:14 <leader>ev mapping)
        export ACTUALVIMRC=$HOME/.vimrc

    ## Aliases ##
        # Ripgrep 
        [[ -x /bin/rg || -x /usr/local/bin/rg ]] && alias rgf="rg --files | rg";

        # Makefiles
        if [[ -f /usr/bin/make ]]; then 
            alias m='make'
            if [[ -f /usr/bin/unbuffer ]]; then 
                # Less Make (unbuffer used to keep colors)
                alias lm='unbuffer make | less -R'
            fi;
        fi;

        # Vim/Neovim editing
        [[ -f /usr/bin/nvim || -f /usr/local/bin/nvim ]] && alias vim='nvim' # Prefer neovim over vim
        [[ -f /usr/bin/vim  || -f /usr/local/bin/vim  ]] && alias vi='vim'   # Prefer either neovim or vim over vi
        # C++ edit ( edits ALL tracked .c/.h/.cpp/.hpp files recursively in a git project )
        # TODO: Fix buggy "new", "file:" strings becoming files
        alias cppe='vim `{ git ls-tree -r HEAD --name-only; git status | grep "new file" | awk '"'"'{ print $3 }'"'"'; } | grep -e "\.\(c\|cpp\)$" -e "\.\(h\|hpp\)$" | env LC_COLLATE=C sort`'
        alias cme='vim `{ git ls-tree -r HEAD --name-only; git status | grep "new file" | awk '"'"'{ print $3 }'"'"'; } | grep -e "CMakeLists.txt" -e ".cmake"`'
        alias javae='vim `{ git ls-tree -r HEAD --name-only; git status | grep "new file" | awk '"'"'{ print $3 }'"'"'; } | grep -e "\.java$" | env LC_COLLATE=C sort`'
        alias pye='vim `{ git ls-tree -r HEAD --name-only; git status | grep "new file" | awk '"'"'{ print $3 }'"'"'; } | grep -e "\.py$" | env LC_COLLATE=C sort`'

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
